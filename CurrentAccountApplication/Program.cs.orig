using System;
using Autofac;
using Autofac.Core;
using Banking;

namespace CurrentAccountApplication
{
    public class Program
    {
        private static IContainer Container { get; set; }
        private static IUser CurrentUser { get; set; }
<<<<<<< HEAD
        private static IBankAccount CurrentAccount { get; set; }
        private static void Main(string[] args)
        {
            CurrentUser = new User();
            CurrentAccount = new CurrentAccount();
            var builder = new ContainerBuilder();
            builder.RegisterType<CurrentAccountDispatcher>()
                .As<IDispatcher>();
            IModule module = new CurrentAccountModule();

            builder.RegisterModule(module);
=======

        private static void Main(string[] args)
        {
            CurrentUser = new User();
            var builder = new ContainerBuilder();
            builder.RegisterType<CurrentAccount>().As<IBankAccount>();
            builder.RegisterType<User>().As<IUser>();

            builder.RegisterType<CurrentAccountDispatcher>()
                .As<IDispatcher>();
            builder.RegisterInstance(CurrentUser)
               .As<IUser>()
               .SingleInstance();
            IModule module = new CurrentAccountModule();
               
                builder.RegisterModule(module);
>>>>>>> Added Distaptcher
            


            Container = builder.Build();

         
            Dispatch(args);
<<<<<<< HEAD
            Console.WriteLine(CurrentUser.Name);
=======
>>>>>>> Added Distaptcher
            Console.Read();
        }


        private static void Dispatch(string[] args)
        {
            using (var scope = Container.BeginLifetimeScope(cfg =>
            {
<<<<<<< HEAD
               
                cfg.RegisterInstance(CurrentUser);
                cfg.RegisterInstance(CurrentAccount);
=======
                cfg.RegisterInstance(CurrentUser);
>>>>>>> Added Distaptcher

            }))
            {
                var dispatch = scope.Resolve<IDispatcher>();
<<<<<<< HEAD
=======
                
                
                
>>>>>>> Added Distaptcher
                var response = dispatch.Dispatch(args);
            }
        }
    }
}

